package org.usfirst.frc.team5199.robot;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Victor;

public class DataBank {
	public static Pixy pixyGear, pixyShooter;
	public static PixyProcess pixyGearProc, pixyShooterProc;
	public static PixyFunctions pixyGearFunc, pixyShooterFunc;
	public static RobotDrive robotDriver;
	public static EncoderDriveFunctions driveEncoders;
	public static UltrasonicData ultraData;
	public static Encoder shooterEncoder;
	public static CANTalon turret;
	public static CircularAverageBuffer flywheelAVG;
	static long time = System.currentTimeMillis();
	public static Spark right = new Spark(0), left = new Spark(1);

	public DataBank() {
		pixyGear = new Pixy(RobotMap.pixyGear);
		pixyGearProc = new PixyProcess(pixyGear);
		pixyShooter = new Pixy(RobotMap.pixyShoot);
		pixyShooterProc = new PixyProcess(pixyShooter);
		pixyGearFunc = new PixyFunctions(pixyGear, robotDriver);
		pixyShooterFunc = new PixyFunctions(pixyShooter, turret);
		time = System.currentTimeMillis();
		ultraData = new UltrasonicData(1, 0, 3, 2);
		shooterEncoder = new Encoder(5, 4, false, Encoder.EncodingType.k4X);
		shooterEncoder.reset();
		shooterEncoder.setDistancePerPulse(RobotMap.inchesPerRotation / 2);
		flywheelAVG = new CircularAverageBuffer(75);
		driveEncoders = new EncoderDriveFunctions(right, left);
		robotDriver = new RobotDrive(right, left);
		// turret.setFeedbackDevice(FeedbackDevice.QuadEncoder);

		// driveEncoders = new EncoderDriveFunctions(, null, null);
	}

	public static void timeReset() {
		time = System.currentTimeMillis();
	}

	public double ultraDistanceAverage() {
		return ultraData.ultraAverage();
	}

	public static double ultraDistanceRight() {
		return ultraData.distanceRight();
	}

	public static double ultraDistanceLeft() {
		return ultraData.distanceLeft();
	}

	public static double pixyGearXPos() {
		return pixyGearProc.compensatedGearPixyData();
	}

	public static double pixyShooterXPos() {
		return pixyShooterProc.shooterData()[0];
	}

	public boolean pixyGearReadingTwoBlocks() {
		if (pixyGearProc.averageData(0, false, pixyGear)[0] != -1) {
			return true;
		} else {
			return false;
		}
	}

	public boolean pixyShooterReadingBlocks() {
		if (pixyShooterProc.shooterData()[0] != -1) {
			return true;
		} else {
			return false;
		}
	}

	public static double shooterRPM() {
		return flywheelAVG.DataAverage(shooterEncoder.getRate());
	}

	public static double turretPosition() {
		return turret.getPosition();
	}

}
